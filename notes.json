[{"id": 1, "content": "const express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst path = require(\"path\");\nconst cors = require('cors');\n\nconst app = express();\napp.use(express.json());\n\n// Configure CORS to allow the specific URL\nconst corsOptions = {\n  origin: 'http://localhost:3000',\n};\n\n\n// Use the CORS middleware with the specified options\napp.use(cors(corsOptions));\n\n// Connect to MongoDB Atlas\nmongoose\n  .connect(\"mongodb://127.0.0.1:27017/onlinedb?authSource=admin\", {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n  })\n  .then(() => console.log(\"Connected MongoDB\"))\n  .catch((err) => console.error(\"MongoDB connection error:\", err));\n\n// Student Schema and Model\nconst studentSchema = new mongoose.Schema({\n  name: String,\n  rollNo: String,\n  scores: {\n    Java: Number,\n    CPP: Number,\n    Python: Number,\n    GenAI: Number,\n    FSD: Number,\n  },\n});\n\nconst Student = mongoose.model(\"Student\", studentSchema);\n\n// Routes\n\n// Insert a new student document\napp.post(\"/student\", async (req, res) => {\n  try {\n    const student = new Student(req.body); // Expecting full student object in the request body\n    await student.save();\n    res.status(201).json({ message: \"Student added successfully\", student });\n  } catch (err) {\n    res.status(400).json({ message: \"Failed to add student\", error: err });\n  }\n});\n\n// Update student data based on rollNo\napp.put(\"/student/:rollNo\", async (req, res) => {\n  const rollNo = req.params.rollNo;\n  try {\n    const updatedStudent = await Student.findOneAndUpdate(\n      { rollNo },\n      req.body,\n      { new: true, runValidators: true }\n    );\n    if (updatedStudent) {\n      res.status(200).json({ message: \"Student updated successfully\", updatedStudent });\n    } else {\n      res.status(404).json({ message: \"Student not found\" });\n    }\n  } catch (err) {\n    res.status(400).json({ message: \"Failed to update student\", error: err });\n  }\n});\n\n// Delete a student document based on rollNo\napp.delete(\"/student/:rollNo\", async (req, res) => {\n  const rollNo = req.params.rollNo;\n  try {\n    const deletedStudents = await Student.deleteMany({ rollNo });\n    if (deletedStudents.deletedCount > 0) {\n      res.status(200).json({ \n        message: \"Students deleted successfully\", \n        deletedCount: deletedStudents.deletedCount \n      });\n    } else {\n      res.status(404).json({ message: \"No students found with the given roll number\" });\n    }\n  } catch (err) {\n    res.status(400).json({ message: \"Failed to delete students\", error: err });\n  }\n});\n\n\n// Retrieve all students' information: rollNo, name, GPA\napp.get(\"/studentsGPA\", async (req, res) => {\n  try {\n    const students = await Student.find({}, { name: 1, rollNo: 1, scores: 1 }); // Fetch specific fields\n    const studentsWithGPA = students.map((student) => {\n      const { Java, CPP, Python, GenAI, FSD } = student.scores;\n      const gpa = ((Java + CPP + Python + GenAI + FSD) / 5).toFixed(2); // GPA Calculation\n      return {\n        name: student.name, \n        rollNo: student.rollNo,\n        gpa,\n      };\n    });\n    res.status(200).json(studentsWithGPA);\n  } catch (err) {\n    res.status(400).json({ message: \"Failed to fetch students\", error: err });\n  }\n});\n\n// Retrieve student details by rollNo\napp.get(\"/student/:rollNo\", async (req, res) => {\n  const rollNo = req.params.rollNo;\n  try {\n    const student = await Student.findOne({ rollNo });\n    if (student) {\n      res.status(200).json(student);\n    } else {\n      res.status(404).json({ message: \"Student not found\" });\n    }\n  } catch (err) {\n    res.status(500).json({ message: \"Error fetching student data\", error: err });\n  }\n});\n\n// Retrieve student details by rollNo\napp.get(\"/allStudents\", async (req, res) => {\n  try {\n    const students = await Student.find({}, { name: 1, rollNo: 1, scores: 1, _id: 0 });\n    res.status(200).json(students);\n  } catch (error) {\n    console.error(\"Error fetching students:\", error);\n    res.status(500).json({ message: \"Failed to fetch students\", error });\n  }\n});\n\n\n// Start the server\nconst PORT = 4000;\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});\n\n", "timestamp": "2024-12-21 22:54:41", "user_id": "user_1", "ip": "127.0.0.1"}, {"id": 2, "content": "class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Try programiz.pro\");\n    }\n}", "timestamp": "2024-12-21 22:55:51", "user_id": "user_1", "ip": "127.0.0.1"}, {"id": 3, "content": "d", "timestamp": "2024-12-21 23:38:16", "user_id": "user_1", "ip": "127.0.0.1"}, {"id": 4, "content": "fg", "timestamp": "2024-12-23 12:43:45", "user_id": "user_1", "ip": "127.0.0.1"}, {"id": 5, "content": "helpppp", "timestamp": "2024-12-23 12:48:50", "user_id": "user_2", "ip": "192.168.60.141"}, {"id": 6, "content": "hghok", "timestamp": "2024-12-23 12:48:58", "user_id": "user_1", "ip": "127.0.0.1"}, {"id": 7, "content": "hi", "timestamp": "2024-12-23 15:47:19", "user_id": "user_1", "ip": "127.0.0.1"}, {"id": 8, "content": "hiii\n", "timestamp": "2024-12-23 15:47:56", "user_id": "user_1", "ip": "169.254.134.191"}, {"id": 9, "content": "heyoui", "timestamp": "2024-12-23 23:43:29", "user_id": "user_1", "ip": "127.0.0.1"}, {"id": 10, "content": "mawa\n", "timestamp": "2024-12-31 12:18:27", "user_id": "user_1", "ip": "10.11.21.151"}, {"id": 11, "content": "ttt", "timestamp": "2024-12-31 12:18:45", "user_id": "user_1", "ip": "127.0.0.1"}, {"id": 12, "content": "neevan\n", "timestamp": "2024-12-31 12:18:51", "user_id": "user_2", "ip": "10.11.22.225"}, {"id": 13, "content": "arey answers pettu ra ippude", "timestamp": "2024-12-31 12:18:57", "user_id": "user_1", "ip": "10.11.21.151"}, {"id": 14, "content": "neevaaaaaaan", "timestamp": "2024-12-31 12:19:08", "user_id": "user_2", "ip": "10.11.22.225"}, {"id": 15, "content": "hi\n", "timestamp": "2025-01-03 15:54:52", "user_id": "user_1", "ip": "10.11.21.151"}, {"id": 16, "content": "hui", "timestamp": "2025-01-03 16:01:17", "user_id": "user_1", "ip": "10.11.21.151"}, {"id": 17, "content": "hi", "timestamp": "2025-01-03 16:01:39", "user_id": "user_2", "ip": "127.0.0.1"}]